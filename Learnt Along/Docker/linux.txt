LINUX COMMANDS.

LINUX DISTRIBUTIONS
Linux is an open source software and for this reason, many individuals and communities have made their own version of Linux known as Linux distributions.
Each of these distributions is made to fit specialized needs like running servers, desktop compyters, mobile phones etc.
Examples are
Ubuntu
Debian
Alpine
Fedora
CentOS. 
There are > 1000 linux distributions.
Most of these distributions support the same sets of command but sometimes, you might discover differences along the way. So Beware.

OUR FOCUS IS ON UBUNTU LINUX(one of the most popular distributions)

RUNNING LINUX(UBUNTU)
If you go to docker hub and you want to pull the official UBUNTU image. you can
docker pull ubuntu OR, you can just go straight to do 
docker run ubuntu

This at first is going to show an error saying somn like ubuntu can't be found locally and then it goes on to pull the image and start a container 
But this container is going to be ended immediately because we were meant to interact with the linux but we didn't.
so if you run docker ps -a, you would see an ubuntu container.

To run the ubuntu container interactively, you run 
docker run -it ubuntu. The -it label there is telling docker to start a container in the interactive mode and load the ubuntu image into it.

After running this command, it shows you a shell. A shell is a program that takes our command and passes them to the OS for execution.
It shows you something like this- this is called the shell prompt
root@a70c05b274f3:/# 

The root reps the currently logged in user. By default, you are logged in as the root user which has the highest priviledge.
After the @ and before the :, you have the name of the machine. The container has the id <whatever is after the @> which is automatically generated by docker.
after the :, we have a / which reps where we are in the file system. / reps the root directory. The highest directory in the file system.

The shell takes the commans and passes them to the kernel for execution


SOME LINUX COMMANDS
1. echo hello (pretty much like print hello)
2. whoami (shows the current user - root)
3. echo $0 (to show us the location of the shell program- - /bin/bash - bash means born again shell)

NB: In Linux, we use / to separate files and directories but in windows, we use \
Becuase Linux is a case sensitive OS. So echo is not the same thing as Echo (would give you an eroor). This is not limited to commands only.
The same thing applies to files to so /bin/bash ain't the same thing as /Bin/bash

4. history - to see all the commands we have executed lately.
    1  echo hello
    2  whoami
    3  echo $0
    4  Echo sike
    5  history
5. !1 or the number of the command you want to execute again.


PACKAGE MANAGERS
npm, yarn, pip, NuGet. In UBUNTU, we have a package manager known as apt (advanced package tool)

INSTALLING PACKAGES USING APT
say we want to install a package nano, we execute the command

apt install nano

this command would give us like an error saying somn like unable to find package
In linux, we have a package database and this database might contain tons of packages but not all these packages
are installed. To see all the packages in the database

apt list

when we type in apt install nano, this command looks at the package database and in the database, it cannot find a package called nano. 
So, this is where we use the updae command to update the package database 

apt update
then you can now run apt install nano

LEsson: Before installing a package, you should always run apt update to update the package database

To remove a package.
apt remove <package-name>




NAVIGATING THE LINUX FILE SYSTEM
1. pwd - print working directory 
2. ls - to see the files and directories in our working directory
NB: Everythin in Linux is a file. Processes are files, directories are files, devices are files, everything.
3. ls -1 - to print each file or directory on a single line.
4. ls -l - for seeing a long listing which includes more details. The first column shows the permissions of that file or directory.
5. cd - to change working directory
After this cd, we can either type in a relative or an absolute path. Absolute path always starts with / the root directory while relative doesn't and relative paths are relative to the working directory you are in.
6. cd ../../
When using ls, we can specify the directory. For instance, lets say we are in one directory, and we want to see the contents of another directory and we dont
want to have to leave the directory we are woking in, we can just do somn like
7. ls /bin - nb: this is an absolute path since we are beginning with the root directory /
When you run this ls /bin, you would see stuffs like pwd, echo, ls, whoami. This is because most of the commands we have been exploring are programs or binaries in the bin directory

remember we said everything in Linux is a file right? Well in the linux file system, in the root directory, we have a home directory. This is where users are strored. So, on a machine with different users, each user is going to have a home directory there.
We also have a directory root. Which is the home diretory of the root user and only the root user can access it
To go to this root directory, we can do cd /root (absolute path), cd root (relative path) or a shortcut cd ~. And this applies to all users not just the root user.
Whenever you type cd ~, it takes you to your home directory.

NB: Blue reps a directory

MANIPULATING FILES AND DIRECTORIES
to create a directory, go the the parent directory you want to create this new directory in and do
1. mkdir hello
2. to rename or move a directory, we do mv hello world (renaming hello to world)
3. assuming we are in the world directory, to create a new file, we do touch name_of_file.extension
4. touch file.txt main.py app.py - to create multiple files in a go.
 
NB: press tab for auto completion (if you press it once and nothing happens, it means there are multiple files in that directory that begin with the letter you entered so press tab again to show you all the directories and files there that begin with the letter you eneterd.), ctrl + w to delete any word you've typed.
5. moving a file to another directory - mv hello.txt /etc/
6. to remove one or more file - rm app.py file2.txt
or you can use a pattern - rm file* - remove any files that start from file or rm *.py (any file that ends with .py)

7. to remove a directory(the -r is telling it to remove that directory and all its files recursively. IF you don't put it, the command would not work.) - rm -r <name of directory>


EDITING AND VIEWING FILES
nano is a package in linux and is a text editor. We use it to write contents to a file.
to install it, first 
1. apt update
2. apt install nano
3. nano filenmae.extension e.g nano file1.txt

4. cat file1.txt - to see the content of a file. cat is useful if the content of the file is not soo much. But if the content were a lot, we'd use
5. more file1.txt - this just shows you the content of the file batch by batch. like 13% first then 30% etc and to stop or to break, just type in q
The problem with this more is that we can only scroll down, we can't scroll up. To be able to scroll up, we use the less command
6. apt install less
7. less file1.txt - now we can navigate up or down using the up and down arrow keys.
8. head -n 5 file1.txt - show the first 5 lines of the file1.txt
9. tail -n 5 file1.txt - show the last 5 lines of the file1.txt


REDIRECTION
The standard input in linux is the keyboard and the standard output is the monitor. But we can always change what the source of the input and output are.
1. echo "hello world" - this prints hello world on the monitor. But we can redirect this ouptut somewhere else like another file using the redirection operator >
2. echo "hello world" > file1.txt - store hello world in file1.txt
3. we could also do somn like cat file1.txt > file2.txt (NB: if file2.txt didn't exist before, it would be created.)

we can use this cat to concatenate multiple files. How?
4. cat file1.txt file2.txt - this prints the contents our file1.txt and file2.txt on the screen. We can redirect this output into another file
5. cat file1.txt file2.txt > combined.txt

This redirection operator is not limited to only echo and cat, we can use it for pretty much anything that prints to the screen
6. ls etc/ > etcContent.txt
The redirect operator usually overwrites that file. To append to a file, we use >>
7. echo "Adebola rocks" >>z
